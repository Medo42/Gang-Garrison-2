<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<event category="DRAW" id="0">
  <actions>
    <action id="603" library="1">
      <!--action name: Code-->
      <kind>CODE</kind>
      <allowRelative>false</allowRelative>
      <question>false</question>
      <canApplyTo>true</canApplyTo>
      <actionType>CODE</actionType>
      <functionName/>
      <relative>false</relative>
      <not>false</not>
      <appliesTo>.self</appliesTo>
      <arguments>
        <argument kind="STRING">xoffset = view_xview[0];
yoffset = view_yview[0];
xsize = view_wview[0];
ysize = view_hview[0];

if (distance_to_point(xoffset+xsize/2,yoffset+ysize/2) &gt; 800)
    exit;

var xr, yr;
xr = round(x);
yr = round(y);
    
image_alpha = cloakAlpha;

if (global.myself.team == team and canCloak)
    image_alpha = cloakAlpha/2 + 0.5;

if (invisible)
    exit;

if(stabbing)
    image_alpha -= power(currentWeapon.stab.alpha, 2);

if team == global.myself.team &amp;&amp; (player != global.myself || global.showHealthBar == 1){
    draw_set_alpha(1);
    draw_healthbar(xr-10, yr-30, xr+10, yr-25,hp*100/maxHp,c_black,c_red,c_green,0,true,true);
}

// Find position of player projected onto planet
var list, playerX, playerY;
list = planetMapPosToPlanetPos(global.myself.object.x, global.myself.object.y);
playerX = ds_list_find_value(list, 2);
playerY = ds_list_find_value(list, 3);
ds_list_destroy(list);

if(point_distance(mouse_x, mouse_y, playerX, playerY)&lt;25) {
    if cloak &amp;&amp; team!=global.myself.team exit;
    draw_set_alpha(1);
    draw_set_halign(fa_center);
    draw_set_valign(fa_bottom);
    if(team==TEAM_RED) {
        draw_set_color(c_red);
    } else {
        draw_set_color(c_blue);
    }
    draw_text_transformed_planet(xr, yr-35, player.name, 1, 1, 0);
    
    if(team == global.myself.team &amp;&amp; global.showTeammateStats)
    {
        if(weapons[0] == Medigun)
            draw_text_transformed_planet(xr,yr+50, "Superburst: " + string(currentWeapon.uberCharge/20) + "%", 1, 1, 0);
        else if(weapons[0] == Shotgun)
            draw_text_transformed_planet(xr,yr+50, "Nuts 'N' Bolts: " + string(nutsNBolts), 1, 1, 0);
        else if(weapons[0] == Minegun)
            draw_text_transformed_planet(xr,yr+50, "Lobbed Mines: " + string(currentWeapon.lobbed), 1, 1, 0);
    }
}  

draw_set_alpha(1);
if team == TEAM_RED ubercolour = c_red;
if team == TEAM_BLUE ubercolour = c_blue;

var sprite;
if zoomed
{
    if team == TEAM_RED
        sprite = SniperCrouchRedS;
    else
        sprite = SniperCrouchBlueS;
}
else
    sprite = sprite_index;
    
if (omnomnomnom)
{
    draw_sprite_ext_planet(OmnomnomnomS,omnomnomnomindex,xr,yr,image_xscale,image_yscale,image_angle,c_white,1);
    if (ubered)
        draw_sprite_ext_planet(OmnomnomnomS,omnomnomnomindex,xr,yr,image_xscale,image_yscale,image_angle,ubercolour,0.7);
}
else if (taunting)
{
    draw_sprite_ext_planet(tauntsprite,tauntindex,xr,yr,image_xscale,image_yscale,image_angle,c_white,1);
    if (ubered)
        draw_sprite_ext_planet(tauntsprite,tauntindex,xr,yr,image_xscale,image_yscale,image_angle,ubercolour,0.7);
}
else if (player.humiliated)
    draw_sprite_ext_planet(humiliationPoses,floor(animationImage)+humiliationOffset,xr,yr,image_xscale,image_yscale,image_angle,c_white,image_alpha);
else if (!taunting)
{
    if (!ubered)
        draw_sprite_ext_planet(sprite,floor(animationImage+animationOffset),xr,yr,image_xscale,image_yscale,image_angle,c_white,image_alpha);
    else if (ubered)
    {
        draw_sprite_ext_planet(sprite,floor(animationImage+animationOffset),xr,yr,image_xscale,image_yscale,image_angle,c_white,1);
        draw_sprite_ext_planet(sprite,floor(animationImage+animationOffset),xr,yr,image_xscale,image_yscale,image_angle,ubercolour,0.7);
    }
}
if (burnDuration &gt; 0 or burnIntensity &gt; 0) {
    for(i = 0; i &lt; numFlames * burnIntensity / maxIntensity; i += 1)
    {
        draw_sprite_ext_planet(FlameS, alarm[5] + i + random(2), x + flameArray_x[i], y + flameArray_y[i], 1, 1, 0, c_white, burnDuration / maxDuration * 0.71 + 0.35);
    }  
}
</argument>
      </arguments>
    </action>
  </actions>
</event>
