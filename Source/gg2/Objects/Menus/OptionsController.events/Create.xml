<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<event category="CREATE" id="0">
  <actions>
    <action id="603" library="1">
      <!--action name: Code-->
      <kind>CODE</kind>
      <allowRelative>false</allowRelative>
      <question>false</question>
      <canApplyTo>true</canApplyTo>
      <actionType>CODE</actionType>
      <functionName/>
      <relative>false</relative>
      <not>false</not>
      <appliesTo>.self</appliesTo>
      <arguments>
        <argument kind="STRING">{
    menu_create(40, 140, 300, 200, 30);

    if room != Options {
        menu_setdimmed();
    }
    
    menu_addedit_text2("Player name:", "global.playerName", '
        var newName;
        newName = string_copy(argument0, 0, min(string_length(argument0), MAX_PLAYERNAME_LENGTH));
        if string_count("#",newName) &gt; 0 {
            show_message("Invalid character ' + "'\#'" + ' in name");
            newName = "Player";
        }
        gg2_write_ini("Settings", "PlayerName", newName);
        if(room != Options and newName != global.playerName)
        {
            write_ubyte(global.serverSocket, PLAYER_CHANGENAME);
            write_ubyte(global.serverSocket, string_length(newName));
            write_string(global.serverSocket, newName);
            socket_send(global.serverSocket);
        }
        return newName;
    ');
    menu_addedit_boolean("Fullscreen:", "global.fullscreen", '
        gg2_write_ini("Settings", "Fullscreen", argument0);
        window_set_fullscreen(argument0);
    ');
    menu_addedit_boolean("Ingame Music:", "global.ingameMusic", '
        gg2_write_ini("Settings", "IngameMusic", argument0);
        if(room != Options)
        {
            if(argument0)
                AudioControlPlaySong(global.IngameMusic, true);
            else
                AudioControlPlaySong(-1, false);
        }
    ');
    
    var particles;
    
    if(global.particles == PARTICLES_NORMAL) {
        particles = "Normal";
    } else if(global.particles == PARTICLES_ALTERNATIVE) {
        particles = "Alternative (faster)";
    } else {
        particles = "Disabled";
    }
    
    menu_addedit_custom("Particles:", particles, '
        global.particles = (global.particles+2) mod 3;
        gg2_write_ini("Settings", "Particles", global.particles);
        if(global.particles == PARTICLES_NORMAL) {
            return "Normal";
        } else if(global.particles == PARTICLES_ALTERNATIVE) {
            return "Alternative (faster)";
        } else {
            return "Disabled";
        }
    ');
    
    var gibs;
    switch (global.gibLevel){
        case(0): gibs = "0, Disabled"; break;
        case(1): gibs = "1, Blood only"; break;
        case(2): gibs = "2, Blood and medium gibs"; break;
        default: gibs = string(global.gibLevel) + ", Full blood and gibs"; break;
    }
    
    menu_addedit_custom("Gibs:", gibs, '
        switch (global.gibLevel){
            case(0): 
                global.gibLevel = 1;
                return "1, Blood only"; 
                break;
            case(1): 
                global.gibLevel = 2;
                return "2, Blood and medium gibs";
                break;
            case(2): 
                global.gibLevel = 3;
                return string(global.gibLevel) + ", Full blood and gibs";
                break;
            default: 
                global.gibLevel = 0;
                return "0, No blood or gibs";
                break;
                }
        gg2_write_ini("Settings", "Gib Level", global.gibLevel);
    ');
    menu_addedit_boolean("Healer Radar:", "global.medicRadar", '
        gg2_write_ini("Settings", "Healer Radar", argument0);
    ');
    menu_addedit_boolean("Show Healer:", "global.showHealer", '
        gg2_write_ini("Settings", "Show Healer", argument0);
    ');
    menu_addedit_boolean("Show Healing:", "global.showHealing", '
        gg2_write_ini("Settings", "Show Healing", argument0);
    ');
    menu_addedit_boolean("Additional Healthbar:", "global.showHealthBar", '
        gg2_write_ini("Settings", "Show Healthbar", argument0);
    ');
    menu_addedit_boolean("Kill Cam:", "global.killCam", '
        gg2_write_ini("Settings", "Kill Cam", argument0);
    ');
    menu_addedit_boolean("V Sync:", "global.monitorSync", '
        gg2_write_ini("Settings", "Monitor Sync", argument0);
        set_synchronization(argument0);
    ');
    menu_addlink("Controls", '
        instance_create(x,y,ControlsController);
        instance_destroy();
    ');
    menu_addlink("HUD Options", '
        instance_create(x,y,HUDOptionsController);
        instance_destroy();
    ');
    menu_addback("Back", '
        instance_destroy();
        if(room == Options)
            instance_create(0,0,MainMenuController);
        else
            instance_create(0,0,InGameMenuController);
    ');
}
</argument>
      </arguments>
    </action>
  </actions>
</event>
